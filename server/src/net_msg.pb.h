// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_msg.proto

#ifndef PROTOBUF_net_5fmsg_2eproto__INCLUDED
#define PROTOBUF_net_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace msg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_net_5fmsg_2eproto();
void protobuf_AssignDesc_net_5fmsg_2eproto();
void protobuf_ShutdownFile_net_5fmsg_2eproto();

class Login_info;

// ===================================================================

class Login_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.Login_info) */ {
 public:
  Login_info();
  virtual ~Login_info();

  Login_info(const Login_info& from);

  inline Login_info& operator=(const Login_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_info& default_instance();

  void Swap(Login_info* other);

  // implements Message ----------------------------------------------

  inline Login_info* New() const { return New(NULL); }

  Login_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_info& from);
  void MergeFrom(const Login_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Login_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sign_type = 1;
  void clear_sign_type();
  static const int kSignTypeFieldNumber = 1;
  ::google::protobuf::uint32 sign_type() const;
  void set_sign_type(::google::protobuf::uint32 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string passwd = 3;
  void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // optional uint32 game_seq = 4;
  void clear_game_seq();
  static const int kGameSeqFieldNumber = 4;
  ::google::protobuf::uint32 game_seq() const;
  void set_game_seq(::google::protobuf::uint32 value);

  // optional bool won = 5;
  void clear_won();
  static const int kWonFieldNumber = 5;
  bool won() const;
  void set_won(bool value);

  // optional uint32 result = 7;
  void clear_result();
  static const int kResultFieldNumber = 7;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional string ip = 8;
  void clear_ip();
  static const int kIpFieldNumber = 8;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:msg.Login_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 sign_type_;
  ::google::protobuf::uint32 game_seq_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  bool won_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_5fmsg_2eproto();
  friend void protobuf_AssignDesc_net_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_net_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Login_info* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Login_info

// optional uint32 sign_type = 1;
inline void Login_info::clear_sign_type() {
  sign_type_ = 0u;
}
inline ::google::protobuf::uint32 Login_info::sign_type() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.sign_type)
  return sign_type_;
}
inline void Login_info::set_sign_type(::google::protobuf::uint32 value) {
  
  sign_type_ = value;
  // @@protoc_insertion_point(field_set:msg.Login_info.sign_type)
}

// optional string name = 2;
inline void Login_info::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login_info::name() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_info::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.Login_info.name)
}
inline void Login_info::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.Login_info.name)
}
inline void Login_info::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.Login_info.name)
}
inline ::std::string* Login_info::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:msg.Login_info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_info::release_name() {
  // @@protoc_insertion_point(field_release:msg.Login_info.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_info::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:msg.Login_info.name)
}

// optional string passwd = 3;
inline void Login_info::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login_info::passwd() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_info::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.Login_info.passwd)
}
inline void Login_info::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.Login_info.passwd)
}
inline void Login_info::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.Login_info.passwd)
}
inline ::std::string* Login_info::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:msg.Login_info.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_info::release_passwd() {
  // @@protoc_insertion_point(field_release:msg.Login_info.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_info::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:msg.Login_info.passwd)
}

// optional uint32 game_seq = 4;
inline void Login_info::clear_game_seq() {
  game_seq_ = 0u;
}
inline ::google::protobuf::uint32 Login_info::game_seq() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.game_seq)
  return game_seq_;
}
inline void Login_info::set_game_seq(::google::protobuf::uint32 value) {
  
  game_seq_ = value;
  // @@protoc_insertion_point(field_set:msg.Login_info.game_seq)
}

// optional bool won = 5;
inline void Login_info::clear_won() {
  won_ = false;
}
inline bool Login_info::won() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.won)
  return won_;
}
inline void Login_info::set_won(bool value) {
  
  won_ = value;
  // @@protoc_insertion_point(field_set:msg.Login_info.won)
}

// optional uint32 result = 7;
inline void Login_info::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 Login_info::result() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.result)
  return result_;
}
inline void Login_info::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:msg.Login_info.result)
}

// optional string ip = 8;
inline void Login_info::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login_info::ip() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_info::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.Login_info.ip)
}
inline void Login_info::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.Login_info.ip)
}
inline void Login_info::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.Login_info.ip)
}
inline ::std::string* Login_info::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:msg.Login_info.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_info::release_ip() {
  // @@protoc_insertion_point(field_release:msg.Login_info.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_info::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:msg.Login_info.ip)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_5fmsg_2eproto__INCLUDED
