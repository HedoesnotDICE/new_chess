// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_5fmsg_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_net_5fmsg_2eproto_metadata_getter(int index);
namespace msg {
class Login_info;
struct Login_infoDefaultTypeInternal;
extern Login_infoDefaultTypeInternal _Login_info_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Login_info* Arena::CreateMaybeMessage<::msg::Login_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

// ===================================================================

class Login_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Login_info) */ {
 public:
  inline Login_info() : Login_info(nullptr) {}
  virtual ~Login_info();
  explicit constexpr Login_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login_info(const Login_info& from);
  Login_info(Login_info&& from) noexcept
    : Login_info() {
    *this = ::std::move(from);
  }

  inline Login_info& operator=(const Login_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_info& operator=(Login_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_info* internal_default_instance() {
    return reinterpret_cast<const Login_info*>(
               &_Login_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login_info& a, Login_info& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_info* New() const final {
    return CreateMaybeMessage<Login_info>(nullptr);
  }

  Login_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_info& from);
  void MergeFrom(const Login_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Login_info";
  }
  protected:
  explicit Login_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_net_5fmsg_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswdFieldNumber = 3,
    kIpFieldNumber = 8,
    kSignTypeFieldNumber = 1,
    kGameSeqFieldNumber = 4,
    kWonFieldNumber = 5,
    kResultFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 3;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // string ip = 8;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 sign_type = 1;
  void clear_sign_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sign_type() const;
  void set_sign_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sign_type() const;
  void _internal_set_sign_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_seq = 4;
  void clear_game_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_seq() const;
  void set_game_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_seq() const;
  void _internal_set_game_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool won = 5;
  void clear_won();
  bool won() const;
  void set_won(bool value);
  private:
  bool _internal_won() const;
  void _internal_set_won(bool value);
  public:

  // uint32 result = 7;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Login_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sign_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_seq_;
  bool won_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login_info

// uint32 sign_type = 1;
inline void Login_info::clear_sign_type() {
  sign_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Login_info::_internal_sign_type() const {
  return sign_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Login_info::sign_type() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.sign_type)
  return _internal_sign_type();
}
inline void Login_info::_internal_set_sign_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sign_type_ = value;
}
inline void Login_info::set_sign_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sign_type(value);
  // @@protoc_insertion_point(field_set:msg.Login_info.sign_type)
}

// string name = 2;
inline void Login_info::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Login_info::name() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.name)
  return _internal_name();
}
inline void Login_info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.Login_info.name)
}
inline std::string* Login_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.Login_info.name)
  return _internal_mutable_name();
}
inline const std::string& Login_info::_internal_name() const {
  return name_.Get();
}
inline void Login_info::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Login_info::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Login_info.name)
}
inline void Login_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Login_info.name)
}
inline void Login_info::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Login_info.name)
}
inline std::string* Login_info::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Login_info::release_name() {
  // @@protoc_insertion_point(field_release:msg.Login_info.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Login_info.name)
}

// string passwd = 3;
inline void Login_info::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& Login_info::passwd() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.passwd)
  return _internal_passwd();
}
inline void Login_info::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:msg.Login_info.passwd)
}
inline std::string* Login_info::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:msg.Login_info.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& Login_info::_internal_passwd() const {
  return passwd_.Get();
}
inline void Login_info::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Login_info::set_passwd(std::string&& value) {
  
  passwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Login_info.passwd)
}
inline void Login_info::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Login_info.passwd)
}
inline void Login_info::set_passwd(const char* value,
    size_t size) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Login_info.passwd)
}
inline std::string* Login_info::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Login_info::release_passwd() {
  // @@protoc_insertion_point(field_release:msg.Login_info.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login_info::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Login_info.passwd)
}

// uint32 game_seq = 4;
inline void Login_info::clear_game_seq() {
  game_seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Login_info::_internal_game_seq() const {
  return game_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Login_info::game_seq() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.game_seq)
  return _internal_game_seq();
}
inline void Login_info::_internal_set_game_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_seq_ = value;
}
inline void Login_info::set_game_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_seq(value);
  // @@protoc_insertion_point(field_set:msg.Login_info.game_seq)
}

// bool won = 5;
inline void Login_info::clear_won() {
  won_ = false;
}
inline bool Login_info::_internal_won() const {
  return won_;
}
inline bool Login_info::won() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.won)
  return _internal_won();
}
inline void Login_info::_internal_set_won(bool value) {
  
  won_ = value;
}
inline void Login_info::set_won(bool value) {
  _internal_set_won(value);
  // @@protoc_insertion_point(field_set:msg.Login_info.won)
}

// uint32 result = 7;
inline void Login_info::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Login_info::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Login_info::result() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.result)
  return _internal_result();
}
inline void Login_info::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void Login_info::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.Login_info.result)
}

// string ip = 8;
inline void Login_info::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Login_info::ip() const {
  // @@protoc_insertion_point(field_get:msg.Login_info.ip)
  return _internal_ip();
}
inline void Login_info::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:msg.Login_info.ip)
}
inline std::string* Login_info::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:msg.Login_info.ip)
  return _internal_mutable_ip();
}
inline const std::string& Login_info::_internal_ip() const {
  return ip_.Get();
}
inline void Login_info::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Login_info::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.Login_info.ip)
}
inline void Login_info::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg.Login_info.ip)
}
inline void Login_info::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.Login_info.ip)
}
inline std::string* Login_info::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Login_info::release_ip() {
  // @@protoc_insertion_point(field_release:msg.Login_info.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login_info::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.Login_info.ip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_5fmsg_2eproto
