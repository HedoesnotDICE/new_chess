// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_game_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_in_5fgame_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_in_5fgame_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_in_5fgame_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_in_5fgame_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_in_5fgame_5fmsg_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_in_5fgame_5fmsg_2eproto_metadata_getter(int index);
namespace msg {
class InGameInfo;
struct InGameInfoDefaultTypeInternal;
extern InGameInfoDefaultTypeInternal _InGameInfo_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::InGameInfo* Arena::CreateMaybeMessage<::msg::InGameInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

// ===================================================================

class InGameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.InGameInfo) */ {
 public:
  inline InGameInfo() : InGameInfo(nullptr) {}
  virtual ~InGameInfo();
  explicit constexpr InGameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InGameInfo(const InGameInfo& from);
  InGameInfo(InGameInfo&& from) noexcept
    : InGameInfo() {
    *this = ::std::move(from);
  }

  inline InGameInfo& operator=(const InGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InGameInfo& operator=(InGameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InGameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InGameInfo* internal_default_instance() {
    return reinterpret_cast<const InGameInfo*>(
               &_InGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InGameInfo& a, InGameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InGameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InGameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InGameInfo* New() const final {
    return CreateMaybeMessage<InGameInfo>(nullptr);
  }

  InGameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InGameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InGameInfo& from);
  void MergeFrom(const InGameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InGameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.InGameInfo";
  }
  protected:
  explicit InGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_in_5fgame_5fmsg_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInGameTypeFieldNumber = 1,
    kIdFieldNumber = 3,
    kRowFieldNumber = 4,
    kBeRedSideFieldNumber = 2,
    kRedWinFieldNumber = 6,
    kColFieldNumber = 5,
  };
  // int32 in_game_type = 1;
  void clear_in_game_type();
  ::PROTOBUF_NAMESPACE_ID::int32 in_game_type() const;
  void set_in_game_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_game_type() const;
  void _internal_set_in_game_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 row = 4;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool beRedSide = 2;
  void clear_beredside();
  bool beredside() const;
  void set_beredside(bool value);
  private:
  bool _internal_beredside() const;
  void _internal_set_beredside(bool value);
  public:

  // bool redWin = 6;
  void clear_redwin();
  bool redwin() const;
  void set_redwin(bool value);
  private:
  bool _internal_redwin() const;
  void _internal_set_redwin(bool value);
  public:

  // int32 col = 5;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.InGameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_game_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  bool beredside_;
  bool redwin_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InGameInfo

// int32 in_game_type = 1;
inline void InGameInfo::clear_in_game_type() {
  in_game_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameInfo::_internal_in_game_type() const {
  return in_game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameInfo::in_game_type() const {
  // @@protoc_insertion_point(field_get:msg.InGameInfo.in_game_type)
  return _internal_in_game_type();
}
inline void InGameInfo::_internal_set_in_game_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  in_game_type_ = value;
}
inline void InGameInfo::set_in_game_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_game_type(value);
  // @@protoc_insertion_point(field_set:msg.InGameInfo.in_game_type)
}

// bool beRedSide = 2;
inline void InGameInfo::clear_beredside() {
  beredside_ = false;
}
inline bool InGameInfo::_internal_beredside() const {
  return beredside_;
}
inline bool InGameInfo::beredside() const {
  // @@protoc_insertion_point(field_get:msg.InGameInfo.beRedSide)
  return _internal_beredside();
}
inline void InGameInfo::_internal_set_beredside(bool value) {
  
  beredside_ = value;
}
inline void InGameInfo::set_beredside(bool value) {
  _internal_set_beredside(value);
  // @@protoc_insertion_point(field_set:msg.InGameInfo.beRedSide)
}

// int32 id = 3;
inline void InGameInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.InGameInfo.id)
  return _internal_id();
}
inline void InGameInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void InGameInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.InGameInfo.id)
}

// int32 row = 4;
inline void InGameInfo::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameInfo::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameInfo::row() const {
  // @@protoc_insertion_point(field_get:msg.InGameInfo.row)
  return _internal_row();
}
inline void InGameInfo::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void InGameInfo::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:msg.InGameInfo.row)
}

// int32 col = 5;
inline void InGameInfo::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameInfo::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameInfo::col() const {
  // @@protoc_insertion_point(field_get:msg.InGameInfo.col)
  return _internal_col();
}
inline void InGameInfo::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void InGameInfo::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:msg.InGameInfo.col)
}

// bool redWin = 6;
inline void InGameInfo::clear_redwin() {
  redwin_ = false;
}
inline bool InGameInfo::_internal_redwin() const {
  return redwin_;
}
inline bool InGameInfo::redwin() const {
  // @@protoc_insertion_point(field_get:msg.InGameInfo.redWin)
  return _internal_redwin();
}
inline void InGameInfo::_internal_set_redwin(bool value) {
  
  redwin_ = value;
}
inline void InGameInfo::set_redwin(bool value) {
  _internal_set_redwin(value);
  // @@protoc_insertion_point(field_set:msg.InGameInfo.redWin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_in_5fgame_5fmsg_2eproto
